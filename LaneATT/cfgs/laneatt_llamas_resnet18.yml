# Training settings
val_every: 1000
model_checkpoint_interval: 1
seed: 0
model:
  name: LaneATT
  parameters:
    backbone: resnet18
    S: &S 72
    topk_anchors: 1000
    anchors_freq_path: 'data/llamas_anchors_freq.pt'
    img_h: &img_h 360
    img_w: &img_w 640
batch_size: 8
epochs: 15
loss_parameters: {}
train_parameters:
  conf_threshold:
  nms_thres: 15.
  nms_topk: 3000
test_parameters:
  conf_threshold: 0.5
  nms_thres: 50.
  nms_topk: &max_lanes 4
optimizer:
  name: Adam
  parameters:
    lr: 0.0003
lr_scheduler:
  name: CosineAnnealingLR
  parameters:
    T_max: 109260 # 15 * 7284 iterations

# Dataset settings
datasets:
  train:
    type: LaneDataset
    parameters:
      S: *S
      dataset: llamas
      split: train
      img_size: [*img_h, *img_w]
      max_lanes: *max_lanes
      normalize: false
      aug_chance: 1.0
      augmentations:
        - name: Affine
          parameters:
            translate_px:
             x: !!python/tuple [-25, 25]
             y: !!python/tuple [-10, 10]
            rotate: !!python/tuple [-6, 6]
            scale: !!python/tuple [0.85, 1.15]
        - name: HorizontalFlip
          parameters:
            p: 0.5

      root: "datasets/llamas"

  test:
    type: LaneDataset
    parameters:
      S: *S
      dataset: llamas
      split: test
      img_size: [*img_h, *img_w]
      max_lanes: 5
      normalize: false
      aug_chance: 0
      augmentations:
      root: "datasets/llamas"


  val:
    type: LaneDataset
    parameters:
      S: *S
      dataset: llamas
      split: val
      img_size: [img_h, *img_w]
      max_lanes: *max_lanes
      normalize: false
      aug_chance: 0
      augmentations:
      root: "datasets/llamas"
